% function genCCodeExampleFile(filename, sys, values)
%
% -> generates an example C-code source file that computes the parts of the
% equations of motions (EoM): MpNE*ddq + bpNE + gpNE = fpNE
% 
% INPUTS:
%   path     path to C-code files
%   filename name of the C-code file, e.g. 'eom_main.c'
%   sys      struct of symbolic EoM generated by genEoM.m
%   values   struct containing the values paramDef, qDef, dqDef, and TDef
%
% Compile the source code by 'g++ eom_main.c -o eom_main -lm' and run
% './eom_main'.
%   
%
% proNEu: tool for symbolic EoM derivation
% Copyright (C) 2011  Marco Hutter, Christian Gehring
% 
% This program is free software: you can redistribute it and/or modify
% it under the terms of the GNU General Public License as published by
% the Free Software Foundation, either version 3 of the License, or
% any later version.
% 
% This program is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
% GNU General Public License for more details.
% 
% You should have received a copy of the GNU General Public License
% along with this program.  If not, see <http://www.gnu.org/licenses/>.
function genCCodeExampleFile(path, filename, sys, values)

%% Write header
schar{1} = '';
schar{end+1} = '#include <math.h>';
schar{end+1} = '#include <stdio.h>';
schar{end+1} = '';
schar{end+1} = 'int main(int argc, char** args)';
schar{end+1} = '{';
schar{end+1} = 'int c,r;';
%% Write parameters
schar{end+1} = '/* parameters */';
schar = [schar genCCodeVariables(sys.param, values.paramDef)];

%% Write generalized coordinates
schar{end+1} = ' ';
schar{end+1} = '/* generalized coordinates */';
schar = [schar genCCodeVariables(sys.q, values.qDef)];
schar{end+1} = ' ';
schar{end+1} = '/* derivatives of generalized coordinates */';
schar = [schar genCCodeVariables(sys.dq, values.dqDef)];
schar{end+1} = ' ';

%% Write actuator forces
schar{end+1} = '/* actuators */';
schar = [schar genCCodeVariables(sys.tau, values.TDef)];
schar{end+1} = ' ';

%% Write mass matrix
schar{end+1} = '/* M matrix */';
n = length(sys.MpNE);
% define matrix
schar{end+1} = ['double MpNE[' num2str(n) ']['  num2str(n) '];'];
% initialize matrix to zero
schar{end+1} = ['for(c=0;c<' num2str(n), ';c++) {'];
schar{end+1} = ['for(r=0;r<' num2str(n), ';r++) {'];
schar{end+1} = 'MpNE[r][c]=0.0;';
schar{end+1} = '}';
schar{end+1} = '}';
% compute matrix
genCCodeMatrix(path, 'eom_MpNE.h', sys.MpNE, 'MpNE');
schar{end+1} = '#include "eom_MpNE.h"';
% print matrix
schar{end+1} = 'printf("\nMass matrix:\n");';
schar{end+1} = ['for(c=0;c<' num2str(n), ';c++) {'];
schar{end+1} = ['for(r=0;r<' num2str(n), ';r++) {'];
schar{end+1} = 'printf("MpNE[%d][%d]=%f\n", r, c, MpNE[r][c]);';
schar{end+1} = '}';
schar{end+1} = '}';
schar{end+1} = ' ';


%% Write b vector
schar{end+1} = '/* b vector */';
n = length(sys.bpNE);
% define matrix
schar{end+1} = ['double bpNE[' num2str(n) '][1];'];
% initialize matrix to zero
schar{end+1} = ['for(r=0;r<' num2str(n), ';r++) {'];
schar{end+1} = 'bpNE[r][0]=0.0;';
schar{end+1} = '}';
% compute matrix
genCCodeMatrix(path, 'eom_bpNE.h', sys.bpNE, 'bpNE');
schar{end+1} = '#include "eom_bpNE.h"';
% print matrix
schar{end+1} = 'printf("\nCentrifugal/Coriolis force vector:\n");';
schar{end+1} = ['for(r=0;r<' num2str(n), ';r++) {'];
schar{end+1} = 'printf("bpNE[%d]=%f\n", r, bpNE[r][0]);';
schar{end+1} = '}';
schar{end+1} = ' ';


%% Write g vector
schar{end+1} = '/* gpNE vector */';
n = length(sys.gpNE);
% define matrix
schar{end+1} = ['double gpNE[' num2str(n) '][1];'];
% initialize matrix to zero
schar{end+1} = ['for(r=0;r<' num2str(n), ';r++) {'];
schar{end+1} = 'gpNE[r][0]=0.0;';
schar{end+1} = '}';
% compute matrix
genCCodeMatrix(path, 'eom_gpNE.h', sys.gpNE, 'gpNE');
schar{end+1} = '#include "eom_gpNE.h"';
% print matrix
schar{end+1} = 'printf("\nGravity force vector:\n");';
schar{end+1} = ['for(r=0;r<' num2str(n), ';r++) {'];
schar{end+1} = 'printf("gpNE[%d]=%f\n", r, gpNE[r][0]);';
schar{end+1} = '}';
schar{end+1} = ' ';

%% Write f vector
schar{end+1} = '/* fpNE vector */';
n = length(sys.fpNE);
% define matrix
schar{end+1} = ['double fpNE[' num2str(n) '][1];'];
% initialize matrix to zero
schar{end+1} = ['for(r=0;r<' num2str(n), ';r++) {'];
schar{end+1} = 'fpNE[r][0]=0.0;';
schar{end+1} = '}';
% compute matrix
genCCodeMatrix(path, 'eom_fpNE.h', sys.fpNE, 'fpNE');
schar{end+1} = '#include "eom_fpNE.h"';
% print matrix
schar{end+1} = 'printf("\nGeneralized force vector:\n");';
schar{end+1} = ['for(r=0;r<' num2str(n), ';r++) {'];
schar{end+1} = 'printf("fpNE[%d]=%f\n", r, fpNE[r][0]);';
schar{end+1} = '}';
schar{end+1} = ' ';


%% Write footer
schar{end+1} = 'return 0;';
schar{end+1} = '}';


%% Write to file
fid = fopen([path filename],'w');
for k=1:length(schar)
    fprintf(fid,'%s\n',schar{k});
end
fclose(fid);